# Copyright (c) 2021-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("./../../../sensor.gni")

ohos_unittest("SensorAgentTest") {
  module_out_path = "sensors/sensor/interfaces"

  sources = [
    "$SUBSYSTEM_DIR/interfaces/native/test/unittest/sensor_agent_test.cpp",
    "$SUBSYSTEM_DIR/test/unittest/common/src/system_info.cpp",
  ]

  include_dirs = [
    "$SUBSYSTEM_DIR/interfaces/native/include",
    "$SUBSYSTEM_DIR/interfaces/kits/c",
    "$SUBSYSTEM_DIR/test/unittest/common/include",
    "$SUBSYSTEM_DIR/utils/common/include",
  ]

  deps = [
    "$SUBSYSTEM_DIR/interfaces/native:sensor_ndk_target",
    "$SUBSYSTEM_DIR/utils/common:libsensor_utils",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_core",
  ]
}

ohos_unittest("SensorCapiTest") {
  module_out_path = "sensors/sensor/interfaces"

  sources =
      [ "$SUBSYSTEM_DIR/interfaces/native/test/unittest/sensor_capi_test.cpp" ]

  include_dirs = [
    "$SUBSYSTEM_DIR/interfaces/native/include",
    "$SUBSYSTEM_DIR/interfaces/kits/c",
    "$SUBSYSTEM_DIR/test/unittest/common/include",
    "$SUBSYSTEM_DIR/utils/common/include",
  ]

  deps = [
    "$SUBSYSTEM_DIR/interfaces/native:sensor_ndk_target",
    "$SUBSYSTEM_DIR/utils/common:libsensor_utils",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_core",
  ]
}

ohos_unittest("SensorAlgorithmTest") {
  module_out_path = "sensors/sensor/interfaces"

  sources = [ "unittest/sensor_algorithm_test.cpp" ]

  include_dirs = [
    "$SUBSYSTEM_DIR/interfaces/native/include",
    "$SUBSYSTEM_DIR/test/unittest/common/include",
    "$SUBSYSTEM_DIR/utils/common/include",
  ]

  deps = [
    "$SUBSYSTEM_DIR/interfaces/native:sensor_ndk_target",
    "$SUBSYSTEM_DIR/utils/common:libsensor_utils",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_core",
  ]
}

ohos_unittest("SensorPowerTest") {
  module_out_path = "sensors/sensor/interfaces"

  sources = [ "unittest/sensor_power_test.cpp" ]

  include_dirs = [
    "$SUBSYSTEM_DIR/utils/common/include",
    "$SUBSYSTEM_DIR/interfaces/native/include",
  ]

  deps = [
    "$SUBSYSTEM_DIR/interfaces/native:sensor_ndk_target",
    "$SUBSYSTEM_DIR/utils/common:libsensor_utils",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_core",
  ]
}

ohos_unittest("PostureTest") {
  module_out_path = "sensors/sensor/interfaces"

  sources = [ "unittest/posture_test.cpp" ]

  include_dirs = [
    "$SUBSYSTEM_DIR/utils/common/include",
    "$SUBSYSTEM_DIR/interfaces/native/include",
  ]

  deps = [
    "$SUBSYSTEM_DIR/interfaces/native:sensor_ndk_target",
    "$SUBSYSTEM_DIR/utils/common:libsensor_utils",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_core",
  ]
}

group("unittest") {
  testonly = true
  deps = [
    ":PostureTest",
    ":SensorAgentTest",
    ":SensorAlgorithmTest",
    ":SensorPowerTest",
  ]
}
